name: CI/CD pipeline
on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  # Build stage: prepare Python and install dependencies
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        id: set-python
        with:
          python-version: "3.13"
          
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "✅ Dependencies installed successfully"

  # Test stage: run unit/integration tests
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Unit Tests with Coverage
        # CRITICAL FIX: Set PYTHONPATH to the project root for imports (src.cli, src.calculator)
        env:
          PYTHONPATH: .
        run: |
          echo "🧪 Running unit tests..."
          # FIX: Use python -m pytest
          python -m pytest tests/unit/ -v --cov=src --cov-report=term --cov-report=xml
          
      - name: Integration Tests
        # CRITICAL FIX: Set PYTHONPATH
        env:
          PYTHONPATH: .
        run: |
          echo "⚙️ Running integration tests..."
          # FIX: Use python -m pytest and target the file explicitly
          python -m pytest tests/test_cli_integration.py -v --tb=short

  # Coverage stage: run coverage and upload HTML report
  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests with coverage and generate HTML report
        # CRITICAL FIX: Set PYTHONPATH
        env:
          PYTHONPATH: .
        run: |
          echo "📈 Checking test coverage..."
          # FIX: Use python -m pytest
          python -m pytest tests/ --cov=src --cov-fail-under=80 --cov-report=term-missing --cov-report=html
          
      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

  # Code quality (lint) stage
  lint:
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          
      - name: Run pylint and save report
        env:
          PYTHONPATH: . # Ensure pylint can resolve src.calculator
        run: |
          echo "📝 Running pylint..."
          # FIX: Use python -m pylint
          python -m pylint src/ --output-format=text > lint_report.txt || true
          echo "Saved lint report to lint_report.txt"
          # enforce threshold (set to 7.0 here; change to 8.0 if you prefer stricter)
          score_line=$(grep -E "rated at" lint_report.txt || true)
          score=$(echo "$score_line" | sed -n 's/.*rated at \([0-9.]*\)\/10.*/\1/p')
          echo "Pylint score: ${score:-not-found}"
          if [ -z "$score" ]; then
            echo "Could not determine pylint score";
            exit 1
          fi
          awk -v s="$score" 'BEGIN{ if (s+0 < 7.0) exit 1 }' || (echo "Pylint score $score is below threshold 7.0" && exit 1)

      - name: Upload lint report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint_report.txt

  # Formatting stage
  format:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install black
        run: |
          python -m pip install --upgrade pip
          pip install black
          
      - name: Check formatting with black (apply if fails)
        run: |
          echo "🎨 Checking formatting with black..."
          # FIX: Use python -m black
          if ! python -m black src/ tests/ --check; then
            echo "Black formatting failed; applying fixes..."
            python -m black src/ tests/
          else
            echo "Black formatting OK"
          fi
          
      - name: Show black diff (if any)
        run: python -m black src/ tests/ --diff || true

  # Security stage: run bandit and upload JSON report
  security:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
          
      - name: Run bandit (console)
        run: |
          echo "🔒 Running bandit security scan..."
          # FIX: Use python -m bandit
          python -m bandit -r src/ -v || true
          
      - name: Run bandit (json output)
        run: |
          rm -f security_report.json || true
          # FIX: Use python -m bandit
          python -m bandit -r src/ -f json -o security_report.json || true
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security_report.json
          
  # Deployment stage: simple packaging (CD part)
  deploy:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install Zip Utility
        # Install the zip utility needed for packaging
        run: sudo apt-get update && sudo apt-get install -y zip unzip

      - name: Download coverage artifact (if present)
        uses: actions/download-artifact@v4
        with:
          name: coverage-html
          path: artifacts/coverage-html
        continue-on-error: true
        
      - name: Download lint report (if present)
        uses: actions/download-artifact@v4
        with:
          name: lint-report
          path: artifacts/lint
        continue-on-error: true
        
      - name: Download security report (if present)
        uses: actions/download-artifact@v4
        with:
          name: security-report
          path: artifacts/security
        continue-on-error: true
        
      - name: "Simple package: compile, zip and upload"
        run: |
          echo "📦 Creating simple deployment package..."
          rm -f deployment-package.zip || true
          # compile python files (best-effort)
          python -m compileall -b -f src || true
          # create zip containing source, compiled files, and any artifacts
          zip -r deployment-package.zip src artifacts README.md requirements.txt || true
          echo "Created deployment-package.zip"
          ls -lh deployment-package.zip || true
          unzip -l deployment-package.zip || true
          
      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-zip
          path: deployment-package.zip